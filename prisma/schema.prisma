// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch" , "fullTextIndex"]
  
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?

  description   String?

  image         String?
  password      String?
  confirmedMail Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userAddress UserAddress?

  //Privacy Settings

  sharesEmail Boolean @default(false)

  writtenRezension Rezension[] @relation("sended")
  receivedRezension Rezension[] @relation("received")

  
  messages Messages[]
  accounts      Account[]
  sessions      Session[]
  inserate      Inserat[]
  favourites Favourite[]
  conversations Conversation[]
  contactOptions ContactOptions[]
  bookings Booking[]
  bookingRequests BookingRequest[]
  notifications Notification[]
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token      String   @unique
  expires    DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id String @id @default(cuid())
  email String
  token      String   @unique
  expires    DateTime

  @@unique([email, token])

}

model Inserat {
  id String @id @default(uuid())

  title String

  description String? @db.Text
  price Float?
  priceDaily Boolean @default(false)

  isPublished Boolean @default(false)

  alreadyOwned Boolean @default(false)
  isAvailable Boolean @default(true)

  emailAddress String?
  phoneNumber String?

  begin DateTime?
  end DateTime?

  annual Boolean @default(false)

  category Category?
  address Address?
  pkwAttribute PkwAttribute?
  lkwAttribute LkwAttribute?

  views Int @default(0)

  message Messages[]

  images Images[]
  purchased Purchase[]
  bookings Booking[]
  bookingrequest BookingRequest[]
  favourites Favourite[]
  
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PkwAttribute {
  id String @id @default(uuid())

  brand CarBrands?
  model String?
  color String?

  seats Int?
  doors Int?

  transmission Transmission?

  type CarType?
  fuel FuelType?

  initial DateTime?
  miles Int?
  power Int?

  inseratId String?
  inserat Inserat? @relation(fields: [inseratId], references: [id], onDelete: Cascade)

  @@unique([inseratId])
}

enum Transmission {
  MANUAL
  AUTOMATIC
  SEMI_AUTOMATIC
}

enum CarBrands {
Acura
Alfa_Romeo
Alpha_Motor_Corporation
Arcimoto
Arrinera_Automotive
Aptera_Motors
Aston_Martin
Atlis_Motor_Vehicles
Audi
BMW
Bentley
Bollinger_Motors
Bugatti
Buick
BYD
BYTON
Cadillac
Canoo
Chery
Chevrolet
Chrysler
Citroen
Dacia
Daihatsu
Dodge
Electra_Meccanica
Electrameccanica_Vehicles_Corp
Elio_Motors
Faraday_Future
Ferrari
Fiat
Fisker_Inc
Ford
Genesis
Geely
GMC
Great_Wall
Haval
Honda
Hummer
Hyundai
Infiniti
Isuzu
JAC
Jaguar
Jeep
Karma_Automotive
Kia
Kreisel_Electric
Land_Rover
Lamborghini
Lexus
Lincoln
Local_Motors
Lordstown_Motors
Lotus
Lucid_Motors
Mahindra
Maserati
Mazda
McLaren
Mercedes_Benz
MG
Micro_Mobility_Systems
Mini
Mitsubishi
NIO
Nikola_Corporation
Nissan
Opel
Peugeot
Polestar
Porsche
Proton
RAM
Renault
Rimac
Rivian
Rolls_Royce
Saab
SEAT
Smart
SsangYong
Subaru
Suzuki
Skoda
Tesla
Terrafugia
Toyota
Vanderhall_Motor_Works
Vauxhall
VinFast
Volkswagen
Volvo
Workhorse_Group_Inc
Wuling
Zoyte
}

enum CarType {
  KOMBI
  COUPE
  SUV
  LIMOUSINE
  VAN
  KLEINBUS
  CABRIO
  KLEIN
  SPORT
  SUPERSPORT
}

enum FuelType {
  ELEKTRISCH
  DIESEL
  BENZIN
  HYBRID
}

model LkwAttribute {
  id String @id @default(uuid())

  brand String?
  model String?
  seats Int?

  weightClass Int?
  drive DriveType?
  loading LoadingType?
  application ApplicationType?

  inseratId String?
  inserat Inserat? @relation(fields: [inseratId], references: [id], onDelete: Cascade)

  @@unique([inseratId])
}

enum DriveType {
  D4x2
  D4x4

  D6x2
  D6x4
  D6x6

  D8x4
  D8x6
  D8x8
}

enum LoadingType {
  AUFFAHRRAMPE
  LADERAMPE
  KRAN
}

enum ApplicationType {
  DEICHSELANHAENGER

  FAHRZEUGTRANSPORT
  FLUESSIGKEITSTRANSPORT

  KASTENWAGEN
  KOFFERAUFBAU
  KUEHLWAGEN

  MOEBELTRANSPORT

  PERSONENTRANSPORT
  PLANWAGEN
  PRITSCHENWAGEN

}



model Address {
  id String @id @default(uuid())

  inseratId String
  inserat Inserat @relation(fields: [inseratId], references: [id], onDelete: Cascade)

  postalCode Int?
  state String?
  locationString String?

  longitude String?
  latitude String?

  @@unique([inseratId])
}

enum Category {
  PKW
  LKW
  LAND
  BAU
  CARAVAN
  TRAILOR
  TRANSPORT
}

model Images {
  id String @id @default(uuid())

  url String
  position Int

  inseratId String?
  inserat Inserat? @relation(fields: [inseratId], references: [id], onDelete: Cascade)

  
}




model Favourite {
  id String @id @default(uuid())

  inseratId String?
  inserat Inserat? @relation(fields: [inseratId], references: [id], onDelete: Cascade)

  userId String?
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

 @@unique([inseratId, userId])
  
}

model Purchase {
  id String @id @default (uuid())
  userId String

  inseratId String
  inserat Inserat @relation(fields: [inseratId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([inseratId, userId])
  @@index([userId])
}

model StripeCustomer {
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id String @id @default(uuid())
  createdAt DateTime @default(now())

  name String?
  isGroup Boolean? @default(false)

  messages Messages[]

  userIds String[]
  users User[]
  }

model Messages {
  id String @id @default(uuid())

  content String? @db.Text
  image String?
  createdAt DateTime @default(now())

  isInterest Boolean @default(false)

  updatedAt DateTime @updatedAt

  inseratId String?
  inserat Inserat? @relation(fields: [inseratId], references: [id], onDelete: Cascade)

  senderId String
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
  

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Rezension {
  id String @id @default(uuid())

  content String? @db.Text
  image String?
  rating Int

  createdAt DateTime @default(now())
  editedAt DateTime? @updatedAt

  isEdited Boolean @default(false)

  receiverId String
  receiver User @relation("received" , fields: [receiverId], references: [id], onDelete: Cascade)

  senderId String
  sender User @relation("sended" ,fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([receiverId, senderId])
  @@index([receiverId])
}

model ContactOptions {
 

  userId String @id @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  email Boolean? @default(false)
  emailAddress String?

  website Boolean? @default(false)
  websiteAddress String?

  phone Boolean? @default(false)
  phoneNumber String?

  userAddress UserAddress?

}

model UserAddress {
  id String @id @default(uuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  contactOptionsId String?
  contactOptions ContactOptions? @relation(fields: [contactOptionsId], references: [userId], onDelete: Cascade)

  postalCode Int?

  locationString String?

  longitude String?
  latitude String?

  @@unique([userId])
  @@unique([contactOptionsId])

}



model Booking {
  id String @id @default(uuid())

  inseratId String
  inserat Inserat @relation(fields: [inseratId], references: [id], onDelete: Cascade)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  startDate DateTime
  endDate DateTime

  createdAt DateTime @default(now())

  content String? @db.Text

  @@unique([inseratId, startDate, endDate])
}

model BookingRequest {
  id String @id @default(uuid())

  inseratId String
  inserat Inserat @relation(fields: [inseratId], references: [id], onDelete: Cascade)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  startDate DateTime
  endDate DateTime

  createdAt DateTime @default(now())

  content String? @db.Text

}

model Notification {
  id String @id @default(uuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  NotificationType NotificationType

  content String? @db.Text

  createdAt DateTime @default(now())
  readAt DateTime?

  @@index([userId])
}

enum NotificationType {
  MESSAGE
  BOOKING
  EMAIL
  FAVOURITE
}







