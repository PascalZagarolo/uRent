// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch" , "fullTextIndex"]
  
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?

  description   String?

  image         String?
  password      String?
  confirmedMail Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  writtenRezension Rezension[] @relation("sended")
  receivedRezension Rezension[] @relation("received")

  
  messages Messages[]
  accounts      Account[]
  sessions      Session[]
  inserate      Inserat[]
  favourites Favourite[]
  conversations Conversation[]
  contactOptions ContactOptions[]
  bookings Booking[]
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token      String   @unique
  expires    DateTime

  @@unique([email, token])
}

model Inserat {
  id String @id @default(uuid())

  title String

  description String? @db.Text
  price Float?

  isPublished Boolean @default(false)

  alreadyOwned Boolean @default(false)
  isAvailable Boolean @default(true)

  begin DateTime?
  end DateTime?

  annual Boolean @default(false)

  category Category?

  views Int @default(0)

  message Messages[]

  images Images[]
  purchased Purchase[]
  bookings Booking[]

  location String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  favourites Favourite[]

  pkwAttribute PkwAttribute?


  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

 

}

enum Category {
  PKW
  LKW
  LAND
  BAU
  CARAVAN
  TRAILOR
}

model Images {
  id String @id @default(uuid())

  url String
  position Int

  inseratId String?
  inserat Inserat? @relation(fields: [inseratId], references: [id], onDelete: Cascade)

  
}




model Favourite {
  id String @id @default(uuid())

  inseratId String?
  inserat Inserat? @relation(fields: [inseratId], references: [id], onDelete: Cascade)

  userId String?
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

 @@unique([inseratId, userId])
  
}

model Purchase {
  id String @id @default (uuid())
  userId String

  inseratId String
  inserat Inserat @relation(fields: [inseratId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([inseratId, userId])
  @@index([userId])
}

model StripeCustomer {
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id String @id @default(uuid())
  createdAt DateTime @default(now())

  name String?
  isGroup Boolean? @default(false)

  messages Messages[]

  userIds String[]
  users User[]
  }

model Messages {
  id String @id @default(uuid())

  content String? @db.Text
  image String?
  createdAt DateTime @default(now())

  isInterest Boolean @default(false)

  updatedAt DateTime @updatedAt

  inseratId String?
  inserat Inserat? @relation(fields: [inseratId], references: [id], onDelete: Cascade)

  senderId String
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
  

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Rezension {
  id String @id @default(uuid())

  content String? @db.Text
  image String?
  rating Int

  receiverId String
  receiver User @relation("received" , fields: [receiverId], references: [id], onDelete: Cascade)

  senderId String
  sender User @relation("sended" ,fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([receiverId, senderId])
  @@index([receiverId])
}

model ContactOptions {
 

  userId String @id @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  email Boolean? @default(false)
  emailAddress String?

  website Boolean? @default(false)
  websiteAddress String?

  phone Boolean? @default(false)
  phoneNumber String?

  address Boolean? @default(false)
  addressString String?



}

model PkwAttribute {
  id String @id @default(uuid())

  marke String?
  model String?
  farbe String?

  sitze Int?

  erstzulassung DateTime?
  kilometer Int?
  leistung Int?

  inseratId String?
  inserat Inserat? @relation(fields: [inseratId], references: [id], onDelete: Cascade)

  @@unique([inseratId])

}

model Booking {
  id String @id @default(uuid())

  inseratId String
  inserat Inserat @relation(fields: [inseratId], references: [id], onDelete: Cascade)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  startDate DateTime
  endDate DateTime
}








