// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch" , "fullTextIndex"]
  output = "../../node_modules/.prisma/client"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  inserate      Inserat[]
  favourites Favourite[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Inserat {
  id String @id @default(uuid())

  title String

  description String? @db.Text
  price Float?

  isPublished Boolean @default(false)

  begin DateTime?
  end DateTime?

  category Category?

  images Images[]
  purchased Purchase[]

  location String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  favourites Favourite[]

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

 

}

enum Category {
  PKW
  LKW
  LAND
  BAU
  CARAVAN
  TRAILOR
}

model Images {
  id String @id @default(uuid())

  url String
  position Int

  inseratId String?
  inserat Inserat? @relation(fields: [inseratId], references: [id], onDelete: Cascade)

  
}


model Attributes {
  id String @id @default(uuid())

  marke String?
  model String?
  farbe String?

  erstzulassung DateTime?
  kilometer Int?
  leistung Int?

  

}

model Favourite {
  id String @id @default(uuid())

  inseratId String?
  inserat Inserat? @relation(fields: [inseratId], references: [id], onDelete: Cascade)

  userId String?
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

 @@unique([inseratId, userId])
  
}

model Purchase {
  id String @id @default (uuid())
  userId String

  inseratId String
  inserat Inserat @relation(fields: [inseratId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([inseratId, userId])
  @@index([userId])
}

model StripeCustomer {
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


